import React, { useState, useEffect } from 'react';

const initialWords = [
  'Firewall', 'Malware', 'Passkey', 'VPN',
  'SOC', 'MFA', 'Proxy', 'Spyware',
  'Analyst', 'Biometrics', 'Phishing', 'Password',
  'CISO', 'IDS', 'Ransomware', 'Engineer'
];

const correctGroups = [
  ['Password', 'MFA', 'Biometrics', 'Passkey'],
  ['VPN', 'Firewall', 'IDS', 'Proxy'],
  ['Phishing', 'Malware', 'Ransomware', 'Spyware'],
  ['CISO', 'SOC', 'Analyst', 'Engineer']
];

const groupExplanations = [
  'Authentication Methods: Techniques to verify user identity.',
  'Network Security Tools: Devices or software that protect network infrastructure.',
  'Cyber Threats: Common types of malicious attacks.',
  'Security Roles: Common roles in a cybersecurity team.'
];

export default function CyberConnections() {
  const [selected, setSelected] = useState([]);
  const [foundGroups, setFoundGroups] = useState([]);
  const [explanations, setExplanations] = useState([]);
  const [time, setTime] = useState(0);
  const [showHint, setShowHint] = useState(false);

  useEffect(() => {
    const timer = setInterval(() => setTime(t => t + 1), 1000);
    return () => clearInterval(timer);
  }, []);

  const handleSelect = (word) => {
    if (selected.includes(word) || foundGroups.flat().includes(word)) return;
    const newSelected = [...selected, word];
    if (newSelected.length === 4) {
      let matched = false;
      correctGroups.forEach((group, index) => {
        if (group.every(word => newSelected.includes(word))) {
          setFoundGroups(prev => [...prev, group]);
          setExplanations(prev => [...prev, groupExplanations[index]]);
          matched = true;
        }
      });
      if (!matched) {
        alert('Not a correct match. Try again.');
      }
      setSelected([]);
    } else {
      setSelected(newSelected);
    }
  };

  const shuffled = [...initialWords].sort();

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
  };

  return (
    <div className="p-6 max-w-2xl mx-auto">
      <h1 className="text-3xl font-bold mb-4">Cyber Connections</h1>
      <p className="mb-2 text-gray-700">Select four words that are connected. If you‚Äôre right, they‚Äôll lock in as a group!</p>
      <p className="mb-4 text-gray-600">‚è±Ô∏è Time: {formatTime(time)}</p>

      <button
        onClick={() => setShowHint(!showHint)}
        className="mb-4 px-4 py-2 bg-yellow-300 rounded hover:bg-yellow-400"
      >
        {showHint ? 'Hide Hint' : 'Show Hint'}
      </button>

      {showHint && (
        <ul className="mb-4 text-sm text-gray-700 list-disc pl-5">
          <li>Think about how systems verify your identity.</li>
          <li>What protects your network connection?</li>
          <li>Which are types of digital attacks?</li>
          <li>Who works in a SOC?</li>
        </ul>
      )}

      <div className="grid grid-cols-4 gap-4 mb-6">
        {shuffled.map((word, idx) => (
          <button
            key={idx}
            onClick={() => handleSelect(word)}
            className={`border rounded-xl py-2 px-3 text-center shadow-md hover:bg-blue-100 transition-all duration-200
              ${selected.includes(word) ? 'bg-blue-300' : ''}
              ${foundGroups.flat().includes(word) ? 'bg-green-300 cursor-default' : ''}`}
          >
            {word}
          </button>
        ))}
      </div>

      {explanations.length > 0 && (
        <div className="mb-4">
          <h2 className="text-xl font-semibold mb-2">Matched Groups:</h2>
          <ul className="list-disc pl-5 text-green-700">
            {explanations.map((exp, i) => (
              <li key={i}>{exp}</li>
            ))}
          </ul>
        </div>
      )}

      {foundGroups.length === 4 && (
        <div className="text-xl font-semibold text-green-700">üéâ You matched all groups correctly in {formatTime(time)}!</div>
      )}
    </div>
  );
}
